# SPDX-FileCopyrightText: Copyright 2020-2024, Contributors to CICD
# SPDX-PackageHomePage: https://github.com/dmyersturnbull/cicd
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: Copyright 2020-2024, Contributors to Tyrannosaurus
# SPDX-PackageHomePage: https://github.com/dmyersturnbull/tyrannosaurus
# SPDX-License-Identifier: Apache-2.0
#
###########################################################
#                     [build-system]
###########################################################

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling~=1.25.0"]

#
###########################################################
#                       [project]
###########################################################

[project]
name = "cicd"
version = "0.0.1-alpha0"
requires-python = "~=3.12"
# 'readme' |--> 'description' in importlib.metadata
readme = { file = "README.md", content-type = "text/markdown" }
# 'description' |--> 'summary' in importlib.metadata
description = "CI/CD test repo"
maintainers = [
  { name = "Douglas Myers-Turnbull", email = " dmyersturnbull@gmail.com" }
]
authors = [
  { name = "Douglas Myers-Turnbull", email = " dmyersturnbull@gmail.com" }
]
keywords = ["python", "ci", "cd"]
# The Python Packaging Authority has contradictory recommendations for specifying the license:
# - If the license is well-known, add a Trove classifier and omit `project.license`.
# - If you do that, tools like pip won't know what the license is.
# - PEP 639, which is actively developed but not targeted for a release,
#   deprecates the Trove classifiers in favor of `project.license` as an SPDX expression:
#   license = "Apache-2.0"
#   license-files = ["LICENSE.txt", "3rd-party-notices/**/*.txt"]
#   The former maps to the core metadata `License-Expression`, now a string.
#   Unfortunately, following that now breaks everything.
# note: PyPI is required to error if License-Expression and a Trove license classifier are present.
# see: https://peps.python.org/pep-0639/#deprecate-license-classifiers
# see: https://discuss.python.org/t/pep-639-round-3-improving-license-clarity-with-better-package-metadata/53020
# see: https://github.com/python/peps/pull/3866

# which maps to License-Expression
license = { text = "Apache-2.0" }
classifiers = [
  "Natural Language :: English",
  "Programming Language :: Python :: 3 :: Only",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Environment :: Console",
  "Topic :: Software Development :: Build Tools",
  "License :: OSI Approved :: Apache Software License",
]
dependencies = [
  "loguru >=0.7",
  "tomlkit >=0.13",
  "typer-slim >=0.12",
  "platformdirs >=4.0",
  "commitizen >=3.0",
  "rich >=13.0",
]

[project.optional-dependencies]
cli = [
  "typer-slim[standard] >=0.9",
]

#
#=============== Scripts ===============#
#
[project.scripts]
# :tyranno: ${project.name} = "${project.name}.__main__:cli"
tyranno = "cicd.__main__:cli"

#
#=============== URLs ===============#
#
[project.urls]
# :tyranno: "https://github.com/${.frag}"
Homepage = "https://github.com/dmyersturnbull/cicd"
# :tyranno: "https://github.com/${.frag}"
Source = "https://github.com/dmyersturnbull/cicd"
# :tyranno: Documentation = https://${.vendor}.github.io/${project.name}
Documentation = "https://dmyersturnbull.github.io/cicd"
# :tyranno: "Issue Tracker" = ${.home}/issues
Tracker = "https://github.com/dmyersturnbull/cicd/issues"
# :tyranno: Download = "https://pypi.org/project/${project.name}"
Download = "https://pypi.org/project/cicd/"
# :tyranno: "Release Notes" = "https://github.com/${.frag}/releases"
"Release Notes" = "https://github.com/dmyersturnbull/cicd/releases"
# :tyranno: Sponsor = "https://${.vendor}.github.io/${project.name}/placeholder#sponsor"
Sponsor = "https://${.vendor}.github.io/${project.name}/placeholder#sponsor"

#
###########################################################
#                     [tool.hatch]
###########################################################

[tool.hatch.envs.default]
  dependencies = [
    "pre-commit >=3.8",
    "hypothesis >=6.100",
    "pytest >=8.2",
    "tzdata >=2024",
    "coverage[toml] >=7.6",
    "pytest-cov >=5.0",
    "mypy >=1.10",
    "ruff >=0.5.5",
    "mkdocs >=1.6",
    "mike >=2.1",
    "mkdocs-literate-nav >=0.6",
    "mkdocs-material >=9.5",
    "mkdocs-minify-plugin >=0.8",
    "mkdocstrings[python] >=0.25",
    "mkdocs-table-reader-plugin >=2.2",
]

#
#=============== Hatch scripts ===============#
#
#skip-install = true
[tool.hatch.envs.default.scripts]
# interactive commit with Commitizen
commit = "cz commit {args}"
# 'test' uses args in [tool.pytest] section (you can pass more)
test = "pytest {args}"
# 'clean' removes unnecessary files (always safe to run)
clean = "tyranno clean {args}"
# build docs and fail for any warning
build-docs = "mkdocs build --clean --strict {args}"
# preview docs (only the current version)
# also builds, but only prints warnings
serve-docs = "mkdocs serve {args}"
# 'format' formats and fixes issues but does not complain
format = [
  "ruff format",
  "ruff check --fix-only",
]
# 'check' only checks but never fixes
check = [
  "ruff check --no-fix .",
  "mypy --non-interactive src tests
]
# only checks with ruff (mypy has a lot of false positives)
check-ruff = "ruff check --no-fix . {args}"
# to complement 'check-ruff'
check-mypy = "mypy --non-interactive src tests {args}"
# only check security via Bandit; we require these rules to pass
check-security = "ruff check --select S --no-fix ."

#=================== scripts for CI/CD ===================
# - - - - - - - - -   !! DANGER ZONE   - - - - - - - - - -
# deploys the **latest** docs to GitHub Pages
# this will overwrite the 'latest' alias (which is a tag on the GH Pages branch)
x-deploy-docs = "mike deploy {args} latest --update-aliases"

#=============== scripts for docs with Mike ===============
# - - - - - - - - -   !! DANGER ZONE   - - - - - - - - - -
# deletes all versions of docs from gh-pages for rebuilding
x-obliterate-docs = "mike delete --all"
# needed only if the docs were deleted or a prior deployment failed
x-redeploy-docs = "mike deploy --strict {args}"
# serves all versions of docs, complete with version selector
x-serve-docs = "mike serve --strict {args}"
# to have a CHANGELOG.md
#x-build-changelog = "cz changelog {args}"

#
###########################################################
#                       [tool.ruff]
###########################################################

[tool.ruff]
line-length = 120 # 120 is hatch's default via 'hatch init'
include = [
  "*.py", # Source
  "pyproject.toml", # This file (RUF rules only)
  "*.ipynb" # Jupyter notebooks
]

[tool.ruff.lint]

preview = true
explicit-preview-rules = true
select = [
  "A", # flake8-builtins
  #"AIR", # Airflow //DISABLED: enable if using airflow//
  "ANN", # flake8-annotations
  #"ARG", # flake8-unused-args //DISABLED: correct in overrides//
  "ASYNC", # flake8-async
  "B", # flake8-bugbear
  #"BLE", # flake8-blind-exception (try: * except: only) //DISABLED: covered by E722 (?)//
  "C", # flake8-comprehensions
  "C4", # flake8-comprehensions
  #"C90", # mmcabe //DISABLED: useful but thin-lined and time-intensive//
  #"COM", # flake8-commas //DISABLED: handled by formatter//
  #"CPY", # flake8-copyright //DISABLED: handle carefully instead; also unmaintained//
  "D", # pydocstyle
  #"DJ", # flake8-django //DISABLED: enable if using Django//
  "DTZ", # flake8-datetimez
  #"E", # pycodestyle ERRORs //DISABLED: almost all handled by formatter//
  "E502", # redundant backslash
  "E71", # == None, != False, not in, not is, etc.
  "E72", # bare except
  "E73", # lambda assignment
  "E74", # easily confused characters in names
  "E9", # can't lint -- syntax error, etc.
  "EM", # flake8-errmsg
  #"ERA", # eradicate (commented-out code) //DISABLED: catches code in comments, etc.//
  #"EXE", # flake8-executable //DISABLED: pre-commit shebang rules instead//
  "F", # pyflakes
  "FA", # flake8-future-annotations
  #"FBT", # flake8-boolean-trap //DISABLED: debatable and sometimes unavoidable//
  #"FIX", # flake8-fix*me //DISABLED: bans TO*DO, etc. and not configurable//
  "FLY", # flynt (https://pypi.org/project/flynt/; updates .format)
  "FURB", # refurb (misc., mostly fixable)
  #"E", # flake8 errors //DISABLED: handled by formatter or nitpicky//
  "G", # flake8-logging-format
  #"I", # isort //DISABLED: handled by formatter//
  #"ICN", # flake8-import-conventionals //DISABLED: handled by formatter//
  "INP", # flake8-no-pep420 (require __init__.py to import)
  "INT", # flake8-gettext (i18n)
  "ISC", # flake8-implicit-str-concat
  "LOG", # flake8-logging
  "N", # pep8-naming
  #"NPY", # numpy-specific rules //DISABLED: enable if using numpy//
  #"PD",  # pandas-vet //DISABLED: enable if using pandas//
  "PERF", # perflint
  "PGH", # pygrep-hooks
  "PIE", # flake8-pie (misc. lint rules)
  "PL", # pylint
  "PT", # flake8-pytest-style
  "PTH", # flake8-use-pathlib
  #"PYI", # flake8-pyi (rules for stub files) //DISABLED: auto-generate stub files//
  #"Q", # flake8-quotes //DISABLED: handled by formatter//
  #"RSE", # flake8-raise //DISABLED: handled by formatter//
  "RET", # flake8-return (fixable)
  "RUF", # Ruff-specific tests
  "S", # bandit
  "SIM", # flake8-simplify
  "SLF", # flake8-self (private access)
  "SLOT", # flake8-slots
  "T10", # flake8-debugger (bans debugger)
  "T20", # flake8-print (bands print and pprint)
  "TD", # flake8-to*do (mandates syntax; note: use 'to-do' in prose)
  "TCH", # flake8-type-checking
  "TID", # flake8-tidy-imports (bans relative imports)
  "TRY", # tryceratops (try-except-raise)
  "UP", # pyupgrade
  #"W", # warnings //DISABLED: most fixed by formatter//
  "W60", # E605 invalid escape character
  "YTT", # flake8-2020 (incorrect Python vr checks)
  "RUF" # Ruff-specific rules
]
ignore = [
  "COM812", # contradicts Ruff formatter
  "D107", # missing docstring in __init__ (put in class docstring)
  "D212", # multi-line docstring start (contradictory)
  "E203", # clons with space before (sometimes useful expand)
  "E225", # missing whitespace around operator (sometimes useful to condense)
  "E501", # line > 79 chars (we use Ruff's formatter)
  "INP001", # missing __init__ -- false positives
  "ISC001", # contradicts Ruff formatter
  "PLR0912", # too many branches
  "PLR1711", # return None at end
  "PLR0916", # too many boolean expressions
  "PLR2044", # line with empty comment
  "PLR6301", # 'self' not used -- correct for overrides etc.; and required in
]
unfixable = [
  "F601", # repeated key in dict {}
  "F602", # repeated key in dict()
  "F811", # unused and redefined
  "F841", # unused variable
  "PGH004", # blanketed noqa
  "PLE2510", # invalid unescaped characters
  "RUF100", # unused noqa
  "SIM112", # uncapitalized env var
  "TD006", # 'to*do' -> 'TO*DO'
  "W605", # invalid escape sequence
]
flake8-bandit.check-typed-exception = true
pydocstyle.convention = "google"
flake8-tidy-imports.ban-relative-imports = "all"

[tool.ruff.lint.pylint]
max-nested-blocks = 3 # default is 5

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = [
  "INP001", # missing __init__
  "PLR2004", # magic value
  "S101", # assert
  "TID252", # relative import
  "S105", # possible password
  "S106",
  "S107",
  "S108", # harcoded temp file
]

#
###########################################################
#                      [tool.pytest]
###########################################################

# A future version of pytest will create [tool.pytest]
[tool.pytest.ini_options]
pythonpath = "./src" # critical!
# coverage stops recursing after it finds one dir without an __init__.py
# so if it finds src/java-app before src/pyapp, it won't find pyapp
# So specify exactly which directories to test
# :tyranno: addopts = """
# :tyranno:   --cov=src/${project.name}
# :tyranno:   --cov-report json:coverage.json \
# :tyranno:   --cov-report term \
# :tyranno:   --cov-config=pyproject.toml \
# :tyranno:   tests/
# :tyranno: """
addopts = """
  --cov=src/cicd \
  --cov-report json:coverage.json \
  --cov-report term \
  --cov-config=pyproject.toml \
  tests/
"""
# show log output from the tests
# in the tests/ code, name the logger {pkg}-TEST to differentiate
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
# create markers so we can disable integration, network-connected, or very slow tests if desired
markers = [
  "integration: marks integration tests (deselect with '-m \"not integration\"')",
  "network: marks tests that require network access (deselect with '-m \"not network\"')"
]
doctest_optionflags = [
  "DONT_ACCEPT_TRUE_FOR_1", # 1 is not the same as True
  "NORMALIZE_WHITESPACE", # allows us to wrap expected output to 120 lines (ignores newlines)
]

#
###########################################################
#                    [tool.coverage]
###########################################################

[tool.coverage.run]
data_file = "coverage.json"
branch = true # quantify % coverage of execution branches
parallel = true # note that pytest-cov overrides this
# :tyranno: source_pkgs = ["src/${project.name}"]
source_pkgs = ["cicd"]
omit = ["src/**/__main__.py"]

[tool.coverage.paths]
source = ["src/"]

[tool.coverage.report]
fail_under = 50 # 50% coverage required
precision = 1 # n decimal points for coverage %
show_missing = true
exclude_lines = [
  "nocov",
  "pragma: no cover",
  "def __repr__",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

#
###########################################################
#                    [tool.commitizen]
###########################################################

[tool.commitizen]
major_version_zero = true # when true and vr < 1.0.0, breaking changes bump the minor version.
annotated_tag = true
gpg_sign = true
version_scheme = "semver"
version_provider = "pep621"
bump_message = "bump: version $current_version → $new_version"
name = "cz_customize" # our custom configuration (see below)
changelog_incremental = true
changelog_merge_prerelease = true

#
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~----
#        [tool.commitizen.customize]
# This should eventually be turned into a plugin.
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~----

[tool.commitizen.customize]
example = "feat(i18n): add Japanese translation"
info = """
We use [Conventional Commits](https://www.conventionalcommits.org/) with the following types.

| Type           | Label               | Changelog section  | semver | Description                                                         |
|----------------|---------------------|--------------------|--------|---------------------------------------------------------------------|
| `feat:`        | `type: feature`     | `✨ Features`       | minor  | Addition or modification of a feature                               |
| `security:   ` | `type: security`    | `🔒️ Security`     | minor  | Vulnerability fix/mitigation or hardening                           |
| `deprecation:` | `type: security`    | `🗑️ Deprecation`  | minor  | Deprecation of a feature or API component                           |
| `fix:`         | `type: fix`         | `🐛 Bug fixes`     | patch  | Bug fix, excluding security vulnerabilities                         |
| `perf:`        | `type: performance` | `⚡️ Performance`   | patch  | Code change that improves performance                               |
| `build:`       | `type: build`       | `🔧 Build system`  | minor  | Modify build, including Docker                                      |
| `docs:`        | `type: docs`        | `📝 Documentation` | patch  | Add or modify docs or examples                                      |
| `test:`        | `type: test`        | `🍒 Miscellaneous` | N/A    | Addition or modification of tests                                   |
| `refactor:`    | `type: refactor`    | `🍒 Miscellaneous` | N/A    | Code change that neither fixes a bug nor adds or modifies a feature |
| `ci:`          | `type: ci`          | `🍒 Miscellaneous` | N/A    | Change to continuous integration and deployment (CI/CD)             |
| `style:`       | `type: style`       | ignored            | N/A    | Code change that does not affect the meaning of the code            |
| `chore:`       | `type: chore`       | ignored            | N/A    | Change that does not modify source, test, or documentation files    |
"""

# The 'bump' type can't be used via commitizen; it's reserved for 'bump' command.
commit_parser =  """\
^\
(?P<change_type>feat|security|deprecation|fix|perf|build|docs|test|refactor|ci|style|chore|bump)\
(?:\\((?P<scope>[-a-z0-9]+)\\))?\
(?P<breaking>!)?\
: (?P<message>[^\n]+)\
.*\
"""

# 'style' and 'chore' are not included in the changelog.
changelog_pattern = "^(feat|fix|security|perf|build|docs|refactor|test|ci)?(!)?"

schema = """
<type>[(<scope>)][!]: <subject>

<body>

[BREAKING CHANGE: <breaking>]
[Closes #<issue> [, #<issue>]*]
[*: <author>]+

Signed-off-by: <author>
"""

# See https://lore.kernel.org/git/60ad75ac7ffca_2ae08208b@natae.notmuch/
schema_pattern = """\
(?s)"\
(drop|feat|security|depr|fix|perf|build|docs|refactor|test|ci|style|chore|release)\
(?:\\(\\([-a-z0-9]+)\\))?\
(!)?\
: ([^\n]+)\
(?:\
\n\
(?:\nBREAKING CHANGE: [^\n]+))?\
(?:\nCloses #(\\d+(?:, \\d+)*))\
(?:\n(Co-authored-by: [^\n]+))*\
(?:\n((?:\
  Acked-by|Reviewed-by|Helped-by|Reported-by|Mentored-by|Suggested-by|CC|Noticed-by|Tested-by|Improved-by\
  |Thanks-to|Based-on-patch-by|Contributions-by|Co-authored-by|Requested-by|Original-patch-by|Inspired-by\
): [^\n]+))*\
(?:\nSigned-off-by: ([^\n]+))*\
)?\
"""

message_template = """\
{{change_type}}\
{% if scope %}{{scope | trim}}{% endif %}\
{% if breaking %}!{% endif %}\
: {{subject | trim}}\
\n{{body | trim}}\
{% if breaking %}\nBREAKING CHANGE: {{breaking | trim}}{% endif %}\
Closes {{issues}}\n\
{% if trailers %}\
{% set trailerslist = trailers.split('||') %}\
{% for trailer in trailerslist %}\n{{trailer | trim}}{% endfor %}\
{% endif %}\
"""

# 'refactor', 'ci', 'style', 'test', and 'chore' should never trigger a version bump.
# (However, 'refactor', 'test', and 'ci' are included in the changelog under 'Miscellaneous'.)
bump_pattern = "^(drop|feat|depr|security|fix|perf|build|docs)"

change_type_order = [
  "breaking",
  "drop",
  "feat",
  "security",
  "depr",
  "fix",
  "perf",
  "build",
  "docs",
  "test",
  "refactor",
  "ci",
  "style",
  "chore"
]

[tool.commitizen.customize.bump_map]
breaking = "MAJOR"
drop = "MAJOR" # redundant -- hopefully these are marked breaking, too
feat = "MINOR"
security = "PATCH"
deprecation = "MINOR"
fix = "PATCH"
perf = "PATCH"
build = "PATCH"
docs = "PATCH"
refactor = "PATCH"

[tool.commitizen.customize.change_type_map]
security = "🔒️ Security"
feat = "✨ Features"
depr = "✨ Deprecations"
fix = "🐛 Bug fixes"
perf = "⚡️ Performance"
build = "🔧 Build"
docs = "📝 Documentation"
refactor = "🍒 Miscellaneous"
test = "🍒 Miscellaneous"

[[tool.commitizen.customize.questions]]
type = "list"
name = "change_type"
message = "Select the type of change you are committing"
choices = [
  {value = "feat", name = "feat: A new feature.", key="f"},
  {value = "drop", name = "drop: Remove a feature.", key="x"},
  {value = "depr", name = "depr: Deprecation of feature.", key="e"},
  {value = "fix", name = "fix: A bug fix.", key="x"},
  {value = "security", name = "security: An exploit fix.", key="v"},
  {value = "perf", name = "perf: A performance improvement.", key="p"},
  {value = "build", name = "build: A build system change.", key="b"},
  {value = "test", name = "test: Add/change tests.", key="t"},
  {value = "docs", name = "docs: A change to documentation.", key="d"},
  {value = "refactor", name = "refactor: A code refactoring.", key="r"},
  {value = "ci", name = "ci: A change to CI/CD.", key="c"},
  {value = "style", name = "style: A change to code style.", key="s"},
  {value = "chore", name = "chore: A change to something non-code.", key="z"},
]

[[tool.commitizen.customize.questions]]
type = "input"
name = "subject"
message = "A short, imperative summary: (lowercase and no period).\n"

[[tool.commitizen.customize.questions]]
type = "list"
name = "scope"
message = "Scope (press [enter] to skip).\n"
choices = [
  {value = "", name = "[none]"},
  {value = "i18n", name = "i18n: Internationalization."},
  {value = "plugins", name = "plugins: Plugins."}
]

[[tool.commitizen.customize.questions]]
type = "input"
name = "body"
message = "Body. Additional information: (press [enter] to skip)\n"

[[tool.commitizen.customize.questions]]
type = "input"
name = "breaking"
message = """
  If this is a breaking change, list the affected classes, methods, or endpoints: \
  (press [enter] to skip)\n
"""

[[tool.commitizen.customize.questions]]
type = "input"
name = "issues"
message = "Closed issues, separated by ', ': (press [enter] to skip)\n"

[[tool.commitizen.customize.questions]]
type = "input"
name = "trailers"
message = """
  Git trailers, separated by '||'. \
  Each must be in the form '<key>: <value>'; \
  e.g., 'Reviewed-by: John Johnson <john@git.com>': \
  (press [enter] to skip)\n
"""


#
###########################################################
#                     [tool.tyranno]
###########################################################

[tool.tyranno]

target_globs = [
  "pyproject.toml", ".github/**/*.yaml",
  "src/**/*.py", "tests/**/*.py", "*.md",
]

trash_globs = ["**/*~", "**/*.bak", "**/*.temp", "**/*.tmp", "**/*.pyi", "build/"]

#=============== Tyranno sync from web ===============#
[tool.tyranno.fetch]
# Sync is performed internally after these files are pulled down.
# That enables us to pull files like SECURITY.md,
# even though they contain strings specific to this project (e.g. URIs).
uris = [
  "https://github.com/dmyersturnbull/tyranno/blob/main/mkdocs.yaml",
  "https://github.com/dmyersturnbull/tyranno/blob/main/CITATION.cff",
  "https://github.com/dmyersturnbull/tyranno/blob/main/CONTRIBUTING.md",
  "https://github.com/dmyersturnbull/tyranno/blob/main/SECURITY.md",
  "https://github.com/dmyersturnbull/tyranno/blob/main/.gitignore",
  "https://github.com/dmyersturnbull/tyranno/blob/main/.dockerignore",
  "https://github.com/dmyersturnbull/tyranno/blob/main/.editorconfig",
  "https://github.com/dmyersturnbull/tyranno/blob/main/.gitattributes",
  "https://github.com/dmyersturnbull/tyranno/blob/main/.prettierignore",
  "https://github.com/dmyersturnbull/tyranno/blob/main/.prettierrc.toml",
  "https://github.com/dmyersturnbull/tyranno/blob/main/.scrutinizer.yaml",
  "https://github.com/dmyersturnbull/tyranno/blob/main/.pre-commit-config.yaml",
  "https://github.com/dmyersturnbull/tyranno/blob/main/docs/gen_ref_pages.py",
  "https://github.com/dmyersturnbull/tyranno/blob/main/docs/js/",
  "https://github.com/dmyersturnbull/tyranno/blob/main/docs/overrides/",
  "https://github.com/dmyersturnbull/tyranno/blob/main/.github/dependabot.yaml",
  "https://github.com/dmyersturnbull/tyranno/blob/main/.github/release.yaml",
  "https://github.com/dmyersturnbull/tyranno/tree/main/.github/workflows/",
  "https://github.com/dmyersturnbull/tyranno/tree/main/.github/DISCUSSION_TEMPLATE/",
  "https://github.com/dmyersturnbull/tyranno/tree/main/.github/ISSUE_TEMPLATE/",
  "https://github.com/dmyersturnbull/tyranno/tree/main/.github/PULL_REQUEST_TEMPLATE/",
]

#=============== Tyranno main data ===============#
# You can add any key-value pairs you want here;
# they're only referenced by 'tyranno' sync comments.
# No keys here have specific meanings.
[tool.tyranno.data]
vendor            = "dmyersturnbull"
frag              = "${.vendor}/${project.name}"
copyright         = "Copyright ${~|year(now_utc())~}, Contributors to ${project.name}"
doi               = "10.5281/zenodo.4485186" # <<<comment out for new
# This is the version used in CD and some CI
# :tyranno: python-version-in-cicd = "${project.requires-python~.semver_max(@).semver_minor(@)}"
python-version-in-cicd = "3.12.3"
# These are the versions to test in CI:
# :tyranno: python-versions = ${project.requires-python|semver_best_set(@).semver_minor(@)}
python-versions = ["3.12.3"]

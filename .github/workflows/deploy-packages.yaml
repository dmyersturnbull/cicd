# SPDX-FileCopyrightText: Copyright 2020-2024, Contributors to CICD
# SPDX-PackageHomePage: https://github.com/dmyersturnbull/cicd
# SPDX-License-Identifier: Apache-2.0

# This workflow automates a software release, deploying packages to four targets.
# These targets are GitHub releases, PyPi, the GitHub Container Registry, and Docker Hub.
# Additionally, it updates "moving" tags: "latest", which is always updated, and, e.g., "v1", "v2" for the latest release per major version.
# The workflow is triggered by pushes of tags matching "latest" or a semver version prefixed by "v".
# These secrets are needed:
# DOCKERHUB_USERNAME
# DOCKERHUB_TOKEN
# PYPI_TOKEN
# GITHUB_TOKEN (provided automatically by GitHub Actions)
# Note that Docker Hub will not be included as a target if DOCKERHUB_USERNAME is not set.
# Notes about container registries:
# - QEMU is set up for cross-platform builds.
# - Docker Buildx is used for advanced Docker image building and pushing.
# - Docker metadata action extracts metadata such as tags and labels for the images.
# - Cosign is used to sign the Docker images to ensure their integrity and authenticity.

name: Deploy packages
run-name: ${{ github.workflow }} for ${{ github.ref_name }}

on:
  push:
    tags:
      - '^v[0-9]+\.[0-9]+\.[0-9](?:[.+-].+)?$'  # Match all semantic versioning tags.
      #- '^v[0-9]+\.[1-9][0-9]*\.[0-9](?:[.+-].*)?$' # OR: Match only 0.1.0+
      #- '^v[1-9][0-9]*\.[0-9]+\.[0-9](?:[.+-].*)?$' # OR: Match only 1.0.0+

concurrency:
  group: ${{ github.workflow }}-${{ github.sha }}
  cancel-in-progress: false

permissions:
  contents: write
  id-token: write
  packages: write

jobs:

  tag-latest:
    # This job tags the release as 'latest' and 'v<x>', where <x> is its major version
    runs-on: ubuntu-latest
    steps:
      - uses: Actions-R-Us/actions-tagger@v2
        with:
          publish_latest_tag: true
          token: ${{ secrets.PAT }}

  build-dist:
    # This job builds the Hatch distribution artifacts (wheels and sdist).
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install Hatch and build artifacts
        run: |
          pip install hatch~=1.12
          hatch build
      - name: Upload Hatch artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  check-dockerfile-exists:
    # This job checks whether the Dockerfile exists.
    runs-on: ubuntu-latest
    needs: build-dist
    outputs:
      docker_tags: ${{ steps.check-dockerfile.outputs.found }}
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Check for Dockerfile
        id: check-dockerfile
        run: |
          if [[ -f Dockerfile ]]; then
            echo "Dockerfile exists."
            echo "::set-output name=found::true"
          else
            echo "Dockerfile does not exist."
            echo "::set-output name=found::false"
          fi

  publish-github-release:
    # This job publishes the release on GitHub.
    runs-on: ubuntu-latest
    needs: build-dist
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
      - name: Publish GitHub release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          generate_release_notes: true
          fail_on_unmatched_files: true
          token: ${{ secrets.github_token }}
          files: dist/*

  publish-pypi:
    # This job publishes the package to PyPI.
    name: Publish to PyPi
    needs: build-dist
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
      - name: Install Hatch
        run: |
          pip install hatch~=1.12
      - name: Publish to PyPi
        run: |
          hatch publish
        env:
          HATCH_INDEX_USER: __token__
          HATCH_INDEX_AUTH: ${{ secrets.PYPI_TOKEN }}
        if: ${{ secrets.PYPI_TOKEN != '' }}

  publish-to-container-registries:
    # This job publishes Docker images to container registries (Docker Hub, GHCR).
    needs: check-dockerfile-exists
    if: needs.check-dockerfile-exists.outputs.found == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Download Docker artifacts
        uses: actions/download-artifact@v4
        with:
          name: docker
      - name: Install cosign
        uses: sigstore/cosign-installer@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        if: ${{ secrets.DOCKERHUB_USERNAME != '' }}
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.github_token }}
      - name: Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ needs.build-and-publish-docker.outputs.docker_tags }}
          labels: ${{ steps.docker-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # type=gha,mode=max specifies that the build cache should be stored and retrieved from the GH Actions cache.
          # This maximizes cache hits to speed up builds.
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          TAGS: ${{ needs.build-and-publish-docker.outputs.docker_tags }}
          DIGEST: ${{ needs.build-and-publish-docker.outputs.docker_digest }}
        run: |
          # This confusing command just signs every Docker image tag using Cosign.
          echo "${{ env.TAGS }}" \
          | xargs -I {} cosign sign --yes {}@${{ env.DIGEST }}

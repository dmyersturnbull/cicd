# SPDX-FileCopyrightText: Copyright 2020-2025, Contributors to Tyrannosaurus
# SPDX-PackageHomePage: https://github.com/dmyersturnbull/tyrannosaurus
# SPDX-License-Identifier: Apache-2.0

# This workflow automates a software release, deploying packages to four targets.
# These targets are GitHub releases, PyPi, the GitHub Container Registry, and Docker Hub.
# Additionally, it updates "moving" tags: "latest", which is always updated,
# and, e.g., "v1", "v2" for the latest release per major version.
# The workflow is triggered by pushes of tags matching "latest" or a semver version prefixed by "v".
# These secrets are needed:
# DOCKERHUB_USERNAME
# DOCKERHUB_TOKEN
# PYPI_TOKEN
# GITHUB_TOKEN (provided automatically by GitHub Actions)
# Note that Docker Hub will not be included as a target if DOCKERHUB_USERNAME is not set.

name: deploy-packages
run-name: >-
  ${{ github.workflow }}
  :: ${{ github.event_name }}
  :: ${{ github.ref_type }}:${{ github.ref_name }}

on:
  push:
    tags:
      - '^v\d+\.\d+\.\d+(-(alpha|beta|preview|rc)\d*)?$' # Match most semver-compatible PEP 440.

concurrency:
  group: ${{ github.workflow }}-${{ github.sha }}
  cancel-in-progress: false

permissions:
  contents: write
  id-token: write
  packages: write
  attestations: write

jobs:
  tag-latest:
    # This job tags the release as 'latest' and 'v<x>', where <x> is its major version
    runs-on: ubuntu-latest
    steps:
      - uses: Actions-R-Us/actions-tagger@v2
        with:
          publish_latest_tag: true

  build-dist:
    # This job builds the Hatch distribution artifacts (wheels and sdist).
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v5
        with:
          python-version: "3.13"
          enable-cache: true
      - name: Install Hatch, and build
        run: |
          uv build --sdist --wheel
      - name: Upload dist/ artifacts (wheels and sdists) as GH workflow artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  check-exists:
    runs-on: ubuntu-latest
    needs: build-dist
    outputs:
      has-docker: ${{ steps.has-docker.outputs.ret }}
      has-helm: ${{ steps.has-helm.outputs.ret }}
    steps:
      - uses: actions/checkout@v4
      - id: has-docker
        run: |
          [[ -f Dockerfile ]]
          echo "ret=$?" >> ${GITHUB_OUTPUT}
      - id: has-helm
        run: |
          [[ -d helm ]]
          echo "ret=$?" >> ${GITHUB_OUTPUT}

  publish-github-release:
    # This job publishes the release on GitHub.
    runs-on: ubuntu-latest
    needs: build-dist
    steps:
      - name: Download dist/ GH workflow artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
      - name: Publish to GitHub Releases
        uses: softprops/action-gh-release@v2
        with:
          # PEP 440 allows `-`, `_`, `.`, or `` as a pre-release separator.
          # Semver only allows `-`.
          # That's by far the best choice anyway, so we'll only look for that.
          # This breaks if the tag includes build metadata that contains '-'; e.g. `+linux-x86_64`.
          # That's not compatible with PEP 440 anyway.
          draft: ${{ contains(github.ref_name, '-') }}
          generate_release_notes: true
          fail_on_unmatched_files: true
          token: ${{ secrets.github_token }}
          files: dist/*

  publish-pypi:
    # This job publishes the package to PyPI.
    name: Publish to PyPi
    needs: build-dist
    runs-on: ubuntu-latest
    steps:
      - name: Download dist/ GH workflow artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
      - uses: astral-sh/setup-uv@v5
        with:
          python-version: "3.13"
          enable-cache: true
      - name: Publish to PyPi using uv.
        # See: https://docs.pypi.org/trusted-publishers/adding-a-publisher/
        run: |
          uv publish || exit $?

  publish-docker:
    name: Publish to Docker container registries
    runs-on: ${{ os }}
    needs:
      - check-exists
    if: ${{ needs.check-exists.outputs.has-helm == '0' }}
    steps:
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker
      #- name: Set up QEMU
      #  uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Extract Docker metadata
        id: docker-metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ GITHUB_REPOSITORY }}
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        env:
          dockerhub_username: ${{ secrets.DOCKERHUB_USERNAME }}
          dockerhub_token: ${{ secrets.DOCKERHUB_TOKEN }}
        with:
          username: ${{ env.dockerhub_username }}
          password: ${{ env.dockerhub_token }}
        if: ${{ env.dockerhub_username != '' }}
      - name: Log in to GHCR
        uses: docker/login-action@v3
        env:
          ghcr_username: ${{ github.actor }}
          ghcr_password: ${{ github.token }}
        with:
          registry: ghcr.io
      - name: Publish Docker image to container registries
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.docker-metadata.outputs.tags }}
          labels: ${{ steps.docker-metadata.outputs.labels }}
          cache-from: type=gha
          # type=gha,mode=max is meant to maximize cache hits.
          cache-to: type=gha,mode=max

  publish-helm:
    name: Publish Helm chart to GitHub Pages
    runs-on: ${{ os }}
    needs:
      - check-exists
    if: ${{ needs.check-exists.outputs.has-helm == '0' }}
    steps:
      - uses: actions/checkout@v4
      - name: Set Git user and email
        run: |
          git config --global user.name 'github-actions[bot]' || exit $?
          git config --global user.email 'github-actions[bot]@users.noreply.github.com' || exit $?
      - uses: helm/chart-releaser-action@v1.7.0
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

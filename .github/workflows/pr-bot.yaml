# SPDX-FileCopyrightText: Copyright 2020-2025, Contributors to Tyrannosaurus
# SPDX-PackageHomePage: https://github.com/dmyersturnbull/tyrannosaurus
# SPDX-License-Identifier: Apache-2.0

# Responds to `/just <command>` comments on pull requests.
name: PR-bot
run-name: Comment by ${{ github.sender.login }} on PR ${{ github.event.pull_request.number }}

on:
  issue_comment:
    types:
      - created
      - edited

permissions:
  contents: read

env:
  NULLARY_CMD: '^\/just (?<cmd>[a-z0-9 -]+)$'
  UNARY_CMD: '^\/just (?<cmd>[a-z0-9 -]+)(?: (?:in)? (?<ref>head|merge))?$'

defaults:
  run:
    shell: bash

jobs:
  # Parse the body and find lines matching `/just <cmd> [<ref>]`.
  # Individual jobs could check e.g. `contains(github.event.comment.body, '/just test')`.
  # However, that can't capture command "arguments" (though, currently, we only need `<ref>`).
  # Note that we allow multiple commands per comment.
  # To associate arguments with their respective commands, we need Bash for regex, etc.
  cmd:
    if: ${{ github.event.issue.pull_request }}
    name: Parse comment cmd
    runs-on: ubuntu-latest
    env:
      TEXT: ${{ github.event.comment.body }}
    outputs:
      nullary: ${{ steps.extract.outputs.nullary }}
      unary: ${{ steps.extract.outputs.unary }}
    steps:
      - name: Extract commands using regex and jq
        id: extract
        shell: bash
        run: |
          nullary=$( \
            grep --only-matching --perl-regexp "$NULLARY_CMD" <<< "$TEXT" \
              | sed -r 's/ /-/g' | sed -r 's/just-//g' \
          )
          echo "nullary=$nullary" >> "$GITHUB_OUTPUT"
          unary=$( \
            grep --only-matching --perl-regexp "$UNARY_CMD" <<< "$TEXT" \
            | sed -r 's/ /-/g' | sed -r 's/just-//g' | sed -r 's/-in-/\//g' \
          )
          echo "unary=$unary" >> "$GITHUB_OUTPUT"

  audit:
    if: ${{ contains(needs.cmd.outputs.unary, 'audit') }}
    needs: cmd
    concurrency:
      group: audit-${{ github.ref_name }}
      cancel-in-progress: true
    uses: ./.github/workflows/_lint.yaml
    with:
      rules: S
      # Run on HEAD, unless "on merge" is specifically requested.
      ref: >-
        ${{ contains(needs.cmd.outputs.unary, 'audit/merge') && github.ref || github.head_ref }}

  lint:
    if: ${{ contains(needs.cmd.outputs.unary, 'lint') }}
    needs: cmd
    concurrency:
      group: lint-${{ github.ref_name }}
      cancel-in-progress: true
    uses: ./.github/workflows/_lint.yaml
    with:
      # Run on HEAD, unless "on merge" is specifically requested.
      ref: >-
        ${{ contains(needs.cmd.outputs.unary, 'lint/merge') && github.ref || github.head_ref }}

  check-image:
    if: ${{ contains(needs.cmd.outputs.unary, 'check-image') }}
    needs: cmd
    concurrency:
      group: check-image-${{ github.ref_name }}
      cancel-in-progress: true
    uses: ./.github/workflows/_check-docker.yaml
    with:
      # Run on HEAD, unless "on merge" is specifically requested.
      ref: >-
        ${{ contains(needs.cmd.outputs.unary, 'check-image/merge') && github.ref || github.head_ref }}

  check-docs:
    if: ${{ contains(needs.cmd.outputs.unary, 'check-docs') }}
    needs: cmd
    concurrency:
      group: check-docs-${{ github.ref_name }}
      cancel-in-progress: true
    uses: ./.github/workflows/_check-docs.yaml
    with:
      # Run on HEAD, unless "on merge" is specifically requested.
      ref: >-
        ${{ contains(needs.cmd.outputs.unary, 'check-docs/merge') && github.ref || github.head_ref }}

  test:
    if: ${{ contains(needs.cmd.outputs.unary, 'test') }}
    needs: cmd
    concurrency:
      group: test-${{ github.ref_name }} # Group shared with `quick-test`.
      cancel-in-progress: true # Let `test` cancel `quick-test` (and `test`).
    uses: ./.github/workflows/_run-pytest.yaml
    with:
      # Run on MERGE, unless "on head" is specifically requested.
      ref: >-
        ${{ contains(needs.cmd.outputs.unary, 'test/head') && github.head_ref || github.ref }}

  quick-test:
    if: ${{ contains(needs.cmd.outputs.unary, 'quick-test') }}
    needs: cmd
    concurrency:
      group: test-${{ github.ref_name }} # Group shared with `test`.
      # Don't cancel. We don't want `quick-test` to cancel a full test.
    uses: ./.github/workflows/_run-pytest.yaml
    with:
      # Run on MERGE, unless "on head" is specifically requested.
      ref: >-
        ${{ contains(needs.cmd.outputs.unary, 'quick-test/head') && github.head_ref || github.ref }}
      markers: not (ux or slow or net or e2e)

  e2e-test:
    if: ${{ contains(needs.cmd.outputs.unary, 'e2e-test') }}
    needs: cmd
    concurrency:
      group: e2e-${{ github.ref_name }} # The others exclude 'e2e', so there's no need to share.
      cancel-in-progress: true
    uses: ./.github/workflows/_test-e2e.yaml
    with:
      # Run on MERGE, unless "on head" is specifically requested.
      ref: >-
        ${{ contains(needs.cmd.outputs.unary, 'test/head') && github.head_ref || github.ref }}

  upgrade:
    if: ${{ contains(needs.cmd.outputs.nullary, 'upgrade') }}
    needs: cmd
    concurrency:
      group: fixup-${{ github.ref_name }} # Group shared with `reformat`.
      # Don't cancel. Although it's safe because `git push` is atomic, we'd also cancel `reformat`.
    permissions:
      contents: write
    uses: ./.github/workflows/_bump-deps.yaml
    with:
      # Always run on HEAD (doesn't make sense on merge).
      ref: ${{ github.head_ref }}

  reformat:
    if: ${{ contains(needs.cmd.outputs.nullary, 'reformat') }}
    needs: cmd
    concurrency:
      group: fixup-${{ github.ref_name }} # Group shared with `upgrade`.
      # Don't cancel. Although it's safe because `git push` is atomic, we'd also cancel `upgrade`.
    permissions:
      contents: write
    uses: ./.github/workflows/_reformat.yaml
    with:
      # Always run on HEAD (doesn't make sense on merge).
      # Reformat files changed since BASE.
      ref: ${{ github.head_ref }}
      compare-to-ref: ${{ github.base_ref }}

name: Test

on:
  pull_request:
    types:
      - ready_for_review
      - synchronize
      - edited
  issue_comment:
    types:
      - created
  workflow_call:
    inputs:
      ref:
        type: string
        description: Ref to checkout
        default: main

permissions:
  contents: read
  statuses: write
  actions: read
  security-events: write

jobs:
  test-matrix:
    if: github.event_name == 'pull_request' || github.event.comment.body == '/please-test' || github.event_name == 'workflow_call'
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        python:
            - "3.12"
    runs-on: ${{ matrix.os }}
    name: Run tests for ${{ matrix.os }}/py${{ matrix.python }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref || github.ref }}
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
      - name: Test on ${{ matrix.os }}/py${{ matrix.python }}
        run: |
          pip install hatch
          hatch run test
      - name: Store coverage for ${{ matrix.os }}/py${{ matrix.python }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.os }}-${{ matrix.python }}
          path: coverage.xml
          if-no-files-found: error

  test-docker:
    if: github.event_name == 'pull_request' || github.event.comment.body == '/please-test' || github.event_name == 'workflow_call'
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref || github.ref }}
      - name: Check for Dockerfile
        id: check_dockerfile
        run: |
          if [[ -f Dockerfile ]]; then
            echo "Dockerfile exists."
            echo "found=true" >> $GITHUB_ENV
          else
            echo "Dockerfile does not exist."
            echo "found=false" >> $GITHUB_ENV
          fi
      - name: Docker build on ${{ matrix.os }}
        if: env.found == 'true'
        run: docker build .

  codeql:
    if: github.event_name == 'pull_request' || github.event.comment.body == '/please-test' || github.event_name == 'workflow_call'
    name: Analyze with CodeQL
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref || github.ref }}
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
      - name: Autobuild with CodeQL
        uses: github/codeql-action/autobuild@v2
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  bandit:
    if: github.event_name == 'pull_request' || github.event.comment.body == '/please-test' || github.event_name == 'workflow_call'
    name: Run Bandit Security Linter
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref || github.ref }}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Lint security with Bandit
        run: |
          pip install 'hatch~=1.12'
          hatch run lint-security

  docs:
    if: github.event_name == 'pull_request' || github.event.comment.body == '/please-test' || github.event_name == 'workflow_call'
    name: Test building docs
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref || github.ref }}
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install
        run: |
          pip install 'hatch~=1.12'
          hatch run build-docs

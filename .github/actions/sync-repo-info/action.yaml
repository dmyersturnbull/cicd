# SPDX-FileCopyrightText: Copyright 2020-2025, Contributors to Tyrannosaurus
# SPDX-PackageHomePage: https://github.com/dmyersturnbull/tyrannosaurus
# SPDX-License-Identifier: Apache-2.0

name: sync-repo-info
description: Syncs repo info and labels to '.github/project.yaml'.

runs:
  using: composite
  steps:
    - uses: actions/checkout@v4
    - name: Install jq and yq
      shell: bash
      run: sudo snap install jq yq
    - name: Delete existing labels
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }} # See https://github.com/github/docs/issues/21930
      run: |
        # Fetch all existing labels using REST API.
        labels_blob=$(gh api "/repos/$GITHUB_REPOSITORY/labels" --jq '.[].name')
        # Loop over the labels and delete them
        while IFS= read -r label; do
          printf "Deleting label: //%s//\n" "$label"
          gh api --method DELETE "/repos/$GITHUB_REPOSITORY/labels/$label"
        done <<< "$labels_blob"
    - name: Wait for changes to be made
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }} # See https://github.com/github/docs/issues/21930
      run: |
        sleep 15
        labels_blob=$(gh api "/repos/$GITHUB_REPOSITORY/labels" --jq '.[].name')
        if (( $(wc -l <<< "$labels_blob") > 0 )); then
          printf "[ERROR] Labels were not deleted: %s.\n" "$labels_blob"
          exit 1
        fi
    - name: Create new labels
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }} # See https://github.com/github/docs/issues/21930
      run: |
        # Extract the new labels into var $labels, a JSON string
        labels=$(yq eval --output-format=json '.labels' .github/project.yaml)
        # Iterate over the labels, adding one at a time.
        echo "$labels" | jq --compact-output '.[]' | while read label; do
          # Extract the keys out of the JSON entry
          name=$(echo "$label" | jq --raw-output .name)
          description=$(echo "$label" | jq --raw-output .description)
          color=$(echo "$label" | jq --raw-output .color | sed 's/#//')
          # Add the label via the REST API
          gh api --method POST "/repos/$GITHUB_REPOSITORY/labels" \
            -f name="$name" \
            -f color="$color" \
            -f description="$description" \
            -H "Accept: application/vnd.github+json"
        done
    - name: Set repo metadata
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }} # See https://github.com/github/docs/issues/21930
      run: |
        # Read the metadata
        description=$(yq eval '.description' "$SETTINGS_PATH")
        homepage=$(yq eval '.homepage' "$SETTINGS_PATH")
        topics=$(yq eval '.topics | join(",")' "$SETTINGS_PATH")
        # Update the repo metadata.
        gh repo edit $GITHUB_REPOSITORY \
          --description "$description" \
          --homepage "$homepage" \
          --add-topic "$topics"
        printf "Updated repo description, homepage, and topics.\n"
